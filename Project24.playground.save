import UIKit
//let name = "Taylor"
//for letter in name {
//    print("Give me a \(letter)")
//}
//

import Foundation
//// name[3] will not work
//let letter = name[name.index(name.startIndex, offsetBy: 3)]
//print("letter: \(letter)")
//
//extension String {
//    subscript (i: Int) -> String {
//        return String(self[index(startIndex, offsetBy: i)])
//    }
//}
//let letter2 = name[3]
//
//// slow
//name.count
////slow
//if name.count == 0 {
//}
//
//// better use
//name.isEmpty

//var password = "12345"
//password.hasPrefix("123")
//password.hasSuffix("345")

//extension String {
//    func deletingPrefix(_ prefix: String) -> String {
//        guard self.hasPrefix(prefix) else { return self }
//        return String(self.dropFirst(prefix.count))
//    }
//    func deletingSuffix(_ suffix: String) -> String {
//        guard self.hasSuffix(suffix) else { return self }
//        return String(self.dropLast(suffix.count))
//    }
//}

//extension String {
//    func deletingPrefix(_ prefix: String) -> String {
//        guard self.hasPrefix(prefix) else { return self }
//        return String(self.dropFirst(prefix.count))
//    }
//    func deleteingSuffix(_ suffix: String) -> String {
//        guard self.hasSuffix(suffix) else { return self }
//        return String(self.dropLast(suffix.count))
//    }
//}
//password.deletingPrefix("12")
//password.deleteingSuffix("5")
//print(password)
let weather = "it's going to rain"
print(weather.capitalized)
//
//extension String {
//    var capitalizedFirst: String {
//        guard let firstLetter = self.first else { return "" }
//        return firstLetter.uppercased() + self.dropFirst()
//    }
//}
//password.capitalizedFirst
//weather.capitalizedFirst

let input = "Swift is like Objective-C without C"
input.contains("Swift")

let languages = ["Swift","JavaScript","Python"]

extension String {
    func containsAny( of items: [String]) -> Bool {
        for item in items {
            if self.contains(item) { return true }
        }
        return false
    }
}
input.containsAny(of: languages)

languages.contains(where: input.contains)


let string = "This is a test string"
let attributes: [NSAttributedString.Key: Any] = [
    .foregroundColor: UIColor.white,
    .backgroundColor: UIColor.red,
    .font: UIFont.boldSystemFont(ofSize: 36)
]

let attributedString = NSAttributedString(string: string, attributes: attributes)

let attributedString1 = NSMutableAttributedString(string: string)
attributedString1.addAttribute(.font, value: UIFont.systemFont(ofSize: 8), range: NSRange(location: 0, length: 
4))
attributedString1.addAttribute(.font, value: UIFont.systemFont(ofSize: 16), range: NSRange(location: 5, length: 
2))
attributedString1.addAttribute(.font, value: UIFont.systemFont(ofSize: 24), range: NSRange(location: 8, length: 
1))
attributedString1.addAttribute(.font, value: UIFont.systemFont(ofSize: 32), range: NSRange(location: 10, 
length: 4))
attributedString1.addAttribute(.font, value: UIFont.systemFont(ofSize: 40), range: NSRange(location: 15, 
length: 6))
attributedString1.addAttributes([.underlineStyle : NSUnderlineStyle.double.rawValue],
                                range: NSRange(location: 10, length: 4))
attributedString1.addAttributes([.strikethroughStyle : NSUnderlineStyle.single.rawValue],
                                range: NSRange(location: 15, length: 4))
attributedString1.addAttributes([.link : NSUnderlineStyle.single.rawValue],
                                range: NSRange(location: 0, length: 4))

//Challenge1:
//Create a String extension that adds a withPrefix() method. If the string already contains the prefix it 
should return itself; if it doesn’t contain the prefix, it should return itself with the prefix added. For 
example: "pet".withPrefix("car") should return “carpet”.
extension String {
    func withPrefix(_ prefix: String) -> String {
        if self.hasPrefix(prefix) {
            return self
        }else {
            return prefix + self
        }
    }
}

let pet = "pet"
pet.withPrefix("car")
"carpet".withPrefix("car")

//Challenge2:
//Create a String extension that adds an isNumeric property that returns true if the string holds any sort of 
number. Tip: creating a Double from a String is a failable initializer.
extension String {
    var isNumeric: Bool {
        if let number = Int(self) {
            return true
        }else if let number = Double(self){
            return true
        }else{
            return false
        }
    }
}
let someStr = "234"
someStr.isNumeric
let someStr1 = "qwerty"
someStr1.isNumeric
let someStr2 = "23.4"
someStr2.isNumeric

//Challenge3
//Create a String extension that adds a lines property that returns an array of all the lines in a string. So, 
“this\nis\na\ntest” should return an array with four elements.
extension String {
    var lines: [String] {
       //let arr = [String]
        let arr = self.components(separatedBy: "\n")
        return arr
    }
}
let testStr = "this\nis\na\ntest"
let res = testStr.lines

